# Iron Forge Candidate Test iOS

## Responsibilities
* The dealership detail view controller is the only view controller in this application. This controller has not been created yet. You are responsible for creating the appropriate Swift file and modifying the storyboard to support this new controller.
* You are responsible for downloading any static images from Zeplin for use in the project. Dynamic images -- for instance, dealership logos and vehicle images, will come from the API.
* You must create all views yourself; do not use Pods to create views.
* You must create a new GraphQL file to fetch all details for a particular dealership on the dealership detail screen.

## Getting Started
* Before you run the project for the first time, run `pod install`.
* Open the project from the `.xcworkspace` file.
* You may need to ensure you have `npm` installed on your machine, as this application makes use of `npx apollo` to run the code generator.
* Use the Zeplin screen provided to you to construct the dealership screen. [Zeplin Here](https://app.zeplin.io/project/5ec04ba9782b0f49047ee2dc/screen/5ec04bf2bf5b3047f0dce9ad).
* You will be evaluated on how closely the screen matches the designs. Spacing, sizes, colors, and so forth will all be checked to see that they match exactly the specifications given in the Zeplin.
* Custom fonts have already been provided to you, and are available to be added to their appropriate elements.
* You will be evaluated on how well you are able to reasonably separate out UI elements into distinct components.
* You will be evaluated on the straightforwardness, readability, correctness, and organization of your implementation.

## Getting the Data
* This application connects to a GraphQL API for its data, and the GraphQL queries for each view controller are contained in the `/GraphQL` folder.
* The GraphQL API is located [here](https://candidate-api-2020-03.ironforge.co/graphql). Opening this link in a browser will open the GraphQL Playground, which you may use to explore the schema that is available to your project.
* To create a new query, create a `.graphql` file. New API types are generated off these query files whenever the application is built. These types are located in `/Generated/API.swift`
* The generated GraphQL types are meant to be used only as an interface between client and server. Once you get the data on the client, you must convert from GraphQL to the appropriate client type. This keeps the client focused on types that make sense to use on the client, rather than using server-centric types in a client-oriented environment.

## Specification
* Clicking on a cell for a particular dealership should segue to the dealership detail screen for that dealership.
* Any dynamic images that you display must fit within the bounds given in the design, and the images must not be stretched to fit. They must fit such that they are centered within the bounds, and any parts of the image outside of the bounds must be cut off.
  * Kingfisher is available to you to set dynamic images.
* The information for **all** vehicles for the given dealership must be pulled down when the screen for that dealership is navigated to.
* The horizontal buttons ("RV", "Snowmobile" etc) in the designs are intended to act as filters on the `name` field of a `vehicleType`. This value is meant to be unique, so you can use that as the programmatic value. `displayName` on a `vehicleType` is intended to be shown to the user.
    *   This screen should only show the vehicles that match one of the selected types.
    *   By default, all types should be selected on the initial load.
* Filters do not load new data from the server, they only filter data already loaded locally.
* Vehicles should be sorted by name.
